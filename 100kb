Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)
Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)
Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)
Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)
Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.

That's when I started all over again and started challenging myself. I started with some tougher problems, read their solutions and tweaked them to see what happens if I make changes. This helped me in gaining confidence over tougher problems and really helped me with speed to solve easier problems. I stopped doing long contests and became regular in participating in short contests and after some bad contests it all started to pay off decently. 

ECE Branch Constraint.
I have been asked many times that how do I manage ECE+CP. The thing is- I don't, I just let things be and somehow manage to pass the exams. I was scared when I got in third year, knowing that I have to make my minor project in some ECE- relevant thing. However, I was extremely lucky in the support I got in past two semesters from my mentor teacher and I made something in which I integrated algorithms+programming+electronics. 

What would I tell a second year?

For the competitive programming part, I would go for the following skip-and-solve approach:
1. Create your account on Codeforces.
2. Go to Problemset - Codeforces and start solving problems sorted by most AC submissions.
3. If you are able to solve 5 problems in a row easily, skip 25 problems and then attempt the next problem. Repeat until you are challenged.
4. If you are stuck in a problem, read the editorial. Try coding it then. After you get AC, always see the solutions of best coders- International GMs and GMs. (GM- Grandmaster). I learned almost 80% of the STL referring to codes.
5. Ask questions. From a silly one to a complex one, don't be afraid to ask one.
6. Be regular in participating in contests. Also, try challenging yourself psychologically. One way to do that is doing a contest a day before your exams, even when you haven't studied ANYTHING. It would really help you tackle pressure situations.
7. Get frustrated by TLEs and WAs. "Higher the frustration, better the code."

For more seasoned programmers who ask me for some resources, now seems like a good time to share some I have collected since past few months.
1. Topcoder tutorials- Data Science Tutorials
2. Very good for starters- Page on iarcs.org.in
3. CS 97SI: Introduction to Competitive Programming Contests
4. List of some reknowned algorithms- Data Structures and Algorithms
5. Begin with DP- Introduction to Dynamic Programming
6. BigO CheatSheet- Big-O Algorithm Complexity Cheat Sheet
7. Good Fenwick tree tutorial- Fenwick trees demystified
8. A Very good blog entry on DS- Algorithm Gym :: Data structures - Codeforces
9. Kind of a Bible- Basic Algorithms & Data-Structures
10. Another Course to refer- T-414-√ÅFLV: A Competitive Programming Course

Also, do attempt ACM-ICPC, form a team ASAP and interact among yourselves as much as you can. Have practice sessions, encourage each others and find your strong areas. I am really grateful to Shantanu Rai and  Naman Jain , who also happen to be my really good friends, for all the encouragement and motivation they put into me through our journey as a team. 

Remember, the above was my journey. Not everyone will benefit with the way I did things. Things are very much different in our college compared to when I joined college. I still remember my first year workshop of Programming hub, when we had just 8 students to attend it and hardly 7-8 people participated in online contests. We now have Lecture Theaters full of students during our workshops and over 100 students participate in online contests now, which is a very positive thing for the college.

So the conclusion- Do what you love. Don't do anything because everyone else is doing it. Get fascinated by the things you can do, once you are determined to do them. Find a reason for everything. I love programming because it helps me distract my mind off many things. Be passionate for what you love- be it your studies, your girlfriend, your sports or anything that you go for. The worst thing about many people is that they fear to dream big. It saddens me when people say they can expect only a 3lpa from themselves after college. Stop complaining about exams pressure/Projects. If you want to do it, you have to do it. Equations of life are stochastic in nature and hence we should not try to fit a deterministic answer to it. Hence, don't worry, whatever you will chose will work out best for you. Build that 20 seconds of courage of taking a leap and trust me, things will start to fall into place. After all, its the journey that matters, not the destination.

I guess I am done with the answer and hope it helps atleast a few.

All the best and Happy Coding! :)

Warnnig: This is going to be a long answer. Read at your own risk of getting bored.

Firstly, I am NOT AT ALL good to be asked about on Quora. There are literally tons and tons of programmers who are way way better.
But still, I will make an attempt in answering this:

First/Second Year:
I have been really interested in mathematics and logically challenging problems since school and knew C since I had it in 6th/7th/8th (School Curriculum) and thus grasped things quickly when I joined college. However, I did not know of competitive programming until college. I did not do much (P.S- Almost nothing) in my first year as I was too confused with ECE and how to bear with it. It was in second year, I guess August,  that I finally realized that I can't understand ECE as good as I do in computer science subjects and started looking at some questions on Codechef. Most of the things still seemed tough but I decided to give it a try and started reading solutions of questions (without attempting them), just to see how people code. It gave me like a start and then I started attempting problems, initially by Googling or asking some seniors. 

It gave me some confidence and I made a team with two of my friends and decided to give ICPC a try. We did not do any team practice, since we knew that we wouldn't qualify for it. However we did, at both of the sites we gave the online round and that too with a pretty decent rank. 
We went to Amritapuri and that's when things changed. We coded 5 problems but got AC in just one and missed other four very closely. I don't know why, but it affected me. I almost left programming for next 4-5 months and just did some easy questions in Codechef contests when I was bored or had nothing to do.

Third Year:
It was in July that I again started with CP seriously and continued for some days before getting a stagnating feeling. I could not go beyond 5-6 in Long contests or 2 question in Short contests. That's when I messaged Rahul Gulati sir (Those who don't know him, he's the original Phoenix-TopCoder Member Profile) and explained him my situation. I will quote what he told me- 
To be able to solve a problem quickly, you first need to be able to solve that problem! I would say that you forget about the time, and just focus on solving problems. Pick harder problems i.e. problems you wouldn't be able to solve in time limit if you were participating in a competition, and try to solve them, and learn from them.##
